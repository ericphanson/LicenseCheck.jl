module LicenseCheck

using licensecheck_jll: licensecheck_jll

export licensecheck, is_osi_approved, find_possible_licenses, find_best_license

include("OSI_LICENSES.jl")

"""
    licensecheck(text::String) -> @NamedTuple{licenses::Vector{String}, percent_covered::Float64}

Returns a vector of the names of licenses (more specifically, the SPDX 3.10 license identifiers) matched in `text` and the percent of the text covered by these matches.

The full list of license IDs is located at [https://github.com/google/licensecheck/blob/v0.3.1/licenses/README.md](https://github.com/google/licensecheck/blob/v0.3.1/licenses/README.md), and includes the SDPX 3.10 licenses, [https://github.com/spdx/license-list-data/tree/v3.10/text](https://github.com/spdx/license-list-data/tree/v3.10/text).

This provides some of the functionality of `licensecheck.Scan` in the original Go library ([https://github.com/google/licensecheck](https://github.com/google/licensecheck)).

## Example

```julia
julia> using LicenseCheck

julia> text = read(joinpath(pkgdir(LicenseCheck), "LICENSE"), String);

julia> licensecheck(text)
(licenses = ["MIT"], percent_covered = 98.82352941176471)
```
"""
function licensecheck(text::String)
    arr, dims, percent_covered = ccall((:License, licensecheck_jll.licensecheck),
                                       Tuple{Ptr{Ptr{UInt8}},Cint,Float64}, (Cstring,),
                                       text)
    return (; licenses=unsafe_string.(unsafe_wrap(Array, arr, dims; own=true)),
            percent_covered=percent_covered)
end

"""
    is_osi_approved(spdx_identifier::String) -> Bool

Checks if a [SDPX 3.10 identifier](https://spdx.dev/ids/) is
[OSI approved](https://opensource.org/licenses) by checking against an autogenerated list.

!!! warning
    
    Note that [`licensecheck`](@ref) understands a larger number of licenses than
    SDPX 3.10, and can output results which are not SDPX 3.10 identifiers.
    Such licenses will yield `is_osi_approved(name) == false` regardless of
    their OSI standing.

## Example

```julia
julia> is_osi_approved("MIT")
true
```
"""
is_osi_approved(spdx_identifier::String) = spdx_identifier ∈ OSI_LICENSES

# the largest license in `https://github.com/spdx/license-list-data/blob/v3.10/text`
# is the `APL-1.0` license which is 45 KB.
# We take a factor of 10 larger, to allow for
# compound licenses.
const LICENSE_MAX_SIZE_IN_BYTES = 45958*10

possible_license(file) = isfile(file) && stat(file).size < LICENSE_MAX_SIZE_IN_BYTES

"""
    find_possible_licenses(dir) -> Vector{@NamedTuple{path::String, licenses::Vector{String}, percent_covered::Float64}}

Compiles a table of possible licenses (i.e. plaintext files smaller than $(LICENSE_MAX_SIZE_IN_BYTES ÷ 1000) KiB) at the top-level of a directory `dir` with their path and the results of [`licensecheck`](@ref), sorted by
`percent_covered`.
"""
function find_possible_licenses(dir)
    possible_licenses = filter(possible_license, readdir(dir; join=true))
    results = @NamedTuple{path::String, licenses::Vector{String}, percent_covered::Float64}[]
    for possible_license in possible_licenses
        text = read(possible_license, String)
        isvalid(String, text) || continue
        push!(results, (; path=possible_license, licensecheck(text)...))
    end
    sort!(results, by = x -> x.percent_covered)
    return results
end

"""
    find_best_license(dir) -> @NamedTuple{path::String, licenses::Vector{String}, percent_covered::Float64}

Returns the license with the highest `percent_covered` from [`find_possible_licenses`](@ref).
"""
find_best_license(dir) = find_possible_licenses(dir)[1]

end
