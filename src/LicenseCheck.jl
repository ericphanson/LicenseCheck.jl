module LicenseCheck

using licensecheck_jll: licensecheck_jll

export licensecheck, is_osi_approved
export find_licenses, find_license
export find_licenses_by_bruteforce, find_licenses_by_list, find_licenses_by_list_intersection

include("OSI_LICENSES.jl")
include("find_licenses.jl")

"""
    licensecheck(text::String) -> @NamedTuple{licenses::Vector{String}, percent_covered::Float64}

Returns a vector of the names of licenses (more specifically, the SPDX 3.10 license identifiers) matched in `text` and the percent of the text covered by these matches.

The full list of license IDs is located at [https://github.com/google/licensecheck/blob/v0.3.1/licenses/README.md](https://github.com/google/licensecheck/blob/v0.3.1/licenses/README.md), and includes the SDPX 3.10 licenses, [https://github.com/spdx/license-list-data/tree/v3.10/text](https://github.com/spdx/license-list-data/tree/v3.10/text).

This provides some of the functionality of `licensecheck.Scan` in the original Go library ([https://github.com/google/licensecheck](https://github.com/google/licensecheck)).

## Example

```julia
julia> using LicenseCheck

julia> text = read(joinpath(pkgdir(LicenseCheck), "LICENSE"), String);

julia> licensecheck(text)
(licenses = ["MIT"], percent_covered = 98.82352941176471)
```
"""
function licensecheck(text::String)
    arr, dims, percent_covered = ccall((:License, licensecheck_jll.licensecheck),
                                       Tuple{Ptr{Ptr{UInt8}},Cint,Float64}, (Cstring,),
                                       text)
    return (; licenses=unsafe_string.(unsafe_wrap(Array, arr, dims; own=true)),
            percent_covered=percent_covered)
end

"""
    is_osi_approved(spdx_identifier::String) -> Bool
    is_osi_approved(nt::NamedTuple) -> Bool

Checks if a [SDPX 3.10 identifier](https://spdx.dev/ids/) is
[OSI approved](https://opensource.org/licenses) by checking against an autogenerated list,
or if a `NamedTuple` with a `licenses` key contains only OSI-approved SDPX 3.10 identifiers.

!!! warning
    
    Note that [`licensecheck`](@ref) understands a larger number of licenses than
    SDPX 3.10, and can output results which are not SDPX 3.10 identifiers.
    Such licenses will yield `is_osi_approved(name) == false` regardless of
    their OSI standing.

## Example

```julia
julia> is_osi_approved("MIT")
true

julia> is_osi_approved(find_license(pkgdir(LicenseCheck)))
true

```
"""
is_osi_approved(spdx_identifier::String) = spdx_identifier âˆˆ OSI_LICENSES
is_osi_approved(nt::NamedTuple) = all(is_osi_approved, nt.licenses)


end # module
